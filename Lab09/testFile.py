from Car import Car
from CarInventoryNode import CarInventoryNode
from CarInventory import CarInventory

def test_car():
    a = Car("Honda", "Civic", 1999, 20000)
    b = Car("Honda", "Civic", 1999, 20000)
    c = Car("Honda", "Civic", 1999, 19999)
    d = Car("Honda", "Civic", 1999, 20001)
    e = Car("Honda", "Civic", 1998, 20000)
    f = Car("Honda", "Civic", 2000, 20000)
    g = Car("Honda", "Advanced", 1999, 20000)
    h = Car("Honda", "Trecker", 1999, 20000)
    j = Car("Accari", "Civic", 1999, 20000)
    k = Car("Zed","Civic", 1999, 20000)
    assert a == b
    assert a > c
    assert a < d
    assert a > e
    assert a < f
    assert a > g
    assert a < h
    assert a > j
    assert a < k
    assert a.__str__() == "Make: HONDA, Model: CIVIC, Year: 1999, Price: $20000"
    assert k.__str__() == "Make: ZED, Model: CIVIC, Year: 1999, Price: $20000"

def test_carinventorynode():
    a = Car("Honda", "Civic", 1999, 20000)
    b = Car("Toyota", "Accord", 1999, 19999)
    c = Car("Tesla", "Model 3", 2023, 129031)
    carNode = CarInventoryNode(a)
    carNode.cars.append(b)
    carNode.cars.append(c)
    assert carNode.__str__() == "Make: HONDA, Model: CIVIC, Year: 1999, Price: $20000\nMake: TOYOTA, Model: ACCORD, Year: 1999, Price: $19999\nMake: TESLA, Model: MODEL 3, Year: 2023, Price: $129031\n"
    d = Car("Toyota", "Corolla", 2023, 10000)
    e = Car("Toyota", "Corolla", 2023, 10000)
    theNode = CarInventoryNode(d)
    theNode.cars.append(e)
    assert theNode.__str__() == "Make: TOYOTA, Model: COROLLA, Year: 2023, Price: $10000\nMake: TOYOTA, Model: COROLLA, Year: 2023, Price: $10000\n"

def test_addToCarInventory():
    bst = CarInventory()
    car1 = Car("Honda", "Civic", 1999, 20000)
    car2 = Car("Honda", "Civic", 1999, 20000)
    car3 = Car("Honda", "Civic", 1999, 19999)
    car4 = Car("Honda", "Civic", 1999, 20001)
    car5 = Car("Nissan", "Leaf", 2018, 18000)
    car6 = Car("Tesla", "Model3", 2018, 50000)
    car7 = Car("Mercedes", "Sprinter", 2022, 40000)
    car8 = Car("Mercedes", "Sprinter", 2014, 25000)
    car9 = Car("Ford", "Ranger", 2021, 25000)
    car10 = Car("Mercedes", "Sprinter", 1000, 12000)
    bst.addCar(car1)
    bst.addCar(car2)
    bst.addCar(car3)
    bst.addCar(car4)
    bst.addCar(car5)
    assert bst.inOrder() == "Make: HONDA, Model: CIVIC, Year: 1999, Price: $20000\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $20000\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $19999\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $20001\nMake: NISSAN, Model: LEAF, Year: 2018, Price: $18000\n"
    assert bst.postOrder() == "Make: NISSAN, Model: LEAF, Year: 2018, Price: $18000\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $20000\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $20000\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $19999\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $20001\n"
    assert bst.preOrder() == "Make: HONDA, Model: CIVIC, Year: 1999, Price: $20000\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $20000\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $19999\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $20001\nMake: NISSAN, Model: LEAF, Year: 2018, Price: $18000\n"
    assert bst.doesCarExist(car1) == True
    assert bst.doesCarExist(car6) == False
    assert bst.getTotalInventoryPrice() == 98000
    assert bst.getBestCar("Honda", "Civic") == car4
    assert bst.getWorstCar("Honda","Civic") == car3
    bst.addCar(car6)
    bst.addCar(car7)
    bst.addCar(car8)
    bst.addCar(car9)
    assert bst.inOrder() == "Make: FORD, Model: RANGER, Year: 2021, Price: $25000\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $20000\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $20000\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $19999\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $20001\nMake: MERCEDES, Model: SPRINTER, Year: 2022, Price: $40000\nMake: MERCEDES, Model: SPRINTER, Year: 2014, Price: $25000\nMake: NISSAN, Model: LEAF, Year: 2018, Price: $18000\nMake: TESLA, Model: MODEL3, Year: 2018, Price: $50000\n"
    assert bst.postOrder() == "Make: FORD, Model: RANGER, Year: 2021, Price: $25000\nMake: MERCEDES, Model: SPRINTER, Year: 2022, Price: $40000\nMake: MERCEDES, Model: SPRINTER, Year: 2014, Price: $25000\nMake: TESLA, Model: MODEL3, Year: 2018, Price: $50000\nMake: NISSAN, Model: LEAF, Year: 2018, Price: $18000\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $20000\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $20000\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $19999\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $20001\n"
    assert bst.preOrder() == "Make: HONDA, Model: CIVIC, Year: 1999, Price: $20000\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $20000\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $19999\nMake: HONDA, Model: CIVIC, Year: 1999, Price: $20001\nMake: FORD, Model: RANGER, Year: 2021, Price: $25000\nMake: NISSAN, Model: LEAF, Year: 2018, Price: $18000\nMake: MERCEDES, Model: SPRINTER, Year: 2022, Price: $40000\nMake: MERCEDES, Model: SPRINTER, Year: 2014, Price: $25000\nMake: TESLA, Model: MODEL3, Year: 2018, Price: $50000\n"
    assert bst.doesCarExist(car7) == True
    assert bst.doesCarExist(car10) == False
    assert bst.getTotalInventoryPrice() == 238000
    assert bst.getBestCar("Mercedes", "Sprinter") == car7
    assert bst.getWorstCar("Mercedes", "Sprinter") == car8

def test_removalFromCarInventory():
    a = CarInventory()
    b = CarInventory()
    c = CarInventory()
    d = CarInventory()
    e = CarInventory()
    f = CarInventory()
    g = CarInventory()
    h = CarInventory()
    i = CarInventory()
    j = CarInventory()
    k = CarInventory()
    l = CarInventory()
    m = CarInventory()
    n = CarInventory()
    o = CarInventory()
    car1 = Car("Honda", "J", 1999, 1)
    car2 = Car("Honda", "D", 1999, 1)
    car3 = Car("Honda", "C", 1999, 1)
    car4 = Car("Honda", "F", 1999, 1)
    car5 = Car("Honda", "E", 1999, 1)
    car6 = Car("Honda", "B", 1999, 1)
    car7 = Car("Honda", "A", 1999, 1)
    car8 = Car("Honda", "O", 1999, 1)
    car9 = Car("Honda", "L", 1999, 1)
    car10 = Car("Honda", "M", 1999, 1)
    car11 = Car("Honda", "Q", 1999, 1)
    car12 = Car("Honda", "Z", 1999, 1)
    car13 = Car("Honda", "G", 1000, 1)
    car14 = Car("Honda", "H", 1999, 1)
    a.addCar(car1)
    a.addCar(car2)
    a.addCar(car3)
    a.addCar(car4)
    a.addCar(car5)
    a.addCar(car6)
    a.addCar(car7)
    a.addCar(car8)
    a.addCar(car9)
    a.addCar(car10)
    a.addCar(car11)
    a.addCar(car12)
    a.addCar(car13)
    a.addCar(car14)
    b.addCar(car1)
    b.addCar(car2)
    b.addCar(car3)
    b.addCar(car4)
    b.addCar(car5)
    b.addCar(car6)
    b.addCar(car7)
    b.addCar(car8)
    b.addCar(car9)
    b.addCar(car10)
    b.addCar(car11)
    b.addCar(car12)
    b.addCar(car13)
    b.addCar(car14)
    c.addCar(car1)
    c.addCar(car2)
    c.addCar(car3)
    c.addCar(car4)
    c.addCar(car5)
    c.addCar(car6)
    c.addCar(car7)
    c.addCar(car8)
    c.addCar(car9)
    c.addCar(car10)
    c.addCar(car11)
    c.addCar(car12)
    c.addCar(car13)
    c.addCar(car14)
    d.addCar(car1)
    d.addCar(car2)
    d.addCar(car3)
    d.addCar(car4)
    d.addCar(car5)
    d.addCar(car6)
    d.addCar(car7)
    d.addCar(car8)
    d.addCar(car9)
    d.addCar(car10)
    d.addCar(car11)
    d.addCar(car12)
    d.addCar(car13)
    d.addCar(car14)
    e.addCar(car1)
    e.addCar(car2)
    e.addCar(car3)
    e.addCar(car4)
    e.addCar(car5)
    e.addCar(car6)
    e.addCar(car7)
    e.addCar(car8)
    e.addCar(car9)
    e.addCar(car10)
    e.addCar(car11)
    e.addCar(car12)
    e.addCar(car13)
    e.addCar(car14)
    f.addCar(car1)
    f.addCar(car2)
    f.addCar(car3)
    f.addCar(car4)
    f.addCar(car5)
    f.addCar(car6)
    f.addCar(car7)
    f.addCar(car8)
    f.addCar(car9)
    f.addCar(car10)
    f.addCar(car11)
    f.addCar(car12)
    f.addCar(car13)
    f.addCar(car14)
    g.addCar(car1)
    g.addCar(car2)
    g.addCar(car3)
    g.addCar(car4)
    g.addCar(car5)
    g.addCar(car6)
    g.addCar(car7)
    g.addCar(car8)
    g.addCar(car9)
    g.addCar(car10)
    g.addCar(car11)
    g.addCar(car12)
    g.addCar(car13)
    g.addCar(car14)
    h.addCar(car1)
    h.addCar(car2)
    h.addCar(car3)
    h.addCar(car4)
    h.addCar(car5)
    h.addCar(car6)
    h.addCar(car7)
    h.addCar(car8)
    h.addCar(car9)
    h.addCar(car10)
    h.addCar(car11)
    h.addCar(car12)
    h.addCar(car13)
    h.addCar(car14)
    i.addCar(car1)
    i.addCar(car2)
    i.addCar(car3)
    i.addCar(car4)
    i.addCar(car5)
    i.addCar(car6)
    i.addCar(car7)
    i.addCar(car8)
    i.addCar(car9)
    i.addCar(car10)
    i.addCar(car11)
    i.addCar(car12)
    i.addCar(car13)
    i.addCar(car14)
    j.addCar(car1)
    j.addCar(car2)
    j.addCar(car3)
    j.addCar(car4)
    j.addCar(car5)
    j.addCar(car6)
    j.addCar(car7)
    j.addCar(car8)
    j.addCar(car9)
    j.addCar(car10)
    j.addCar(car11)
    j.addCar(car12)
    j.addCar(car13)
    j.addCar(car14)
    k.addCar(car1)
    k.addCar(car2)
    k.addCar(car3)
    k.addCar(car4)
    k.addCar(car5)
    k.addCar(car6)
    k.addCar(car7)
    k.addCar(car8)
    k.addCar(car9)
    k.addCar(car10)
    k.addCar(car11)
    k.addCar(car12)
    k.addCar(car13)
    k.addCar(car14)
    l.addCar(car1)
    l.addCar(car2)
    l.addCar(car3)
    l.addCar(car4)
    l.addCar(car5)
    l.addCar(car6)
    l.addCar(car7)
    l.addCar(car8)
    l.addCar(car9)
    l.addCar(car10)
    l.addCar(car11)
    l.addCar(car12)
    l.addCar(car13)
    l.addCar(car14)
    m.addCar(car1)
    m.addCar(car2)
    m.addCar(car3)
    m.addCar(car4)
    m.addCar(car5)
    m.addCar(car6)
    m.addCar(car7)
    m.addCar(car8)
    m.addCar(car9)
    m.addCar(car10)
    m.addCar(car11)
    m.addCar(car12)
    m.addCar(car13)
    m.addCar(car14)
    n.addCar(car1)
    n.addCar(car2)
    n.addCar(car3)
    n.addCar(car4)
    n.addCar(car5)
    n.addCar(car6)
    n.addCar(car7)
    n.addCar(car8)
    n.addCar(car9)
    n.addCar(car10)
    n.addCar(car11)
    n.addCar(car12)
    n.addCar(car13)
    n.addCar(car14)
    o.addCar(car1)
    o.addCar(car2)
    o.addCar(car3)
    o.addCar(car4)
    o.addCar(car5)
    o.addCar(car6)
    o.addCar(car7)
    o.addCar(car8)
    o.addCar(car9)
    o.addCar(car10)
    o.addCar(car11)
    o.addCar(car12)
    o.addCar(car13)
    o.addCar(car14)
    assert a.removeCar("Honda", "A", 1999, 1) == True
    assert b.removeCar("Honda", "B", 1999, 1) == True
    assert c.removeCar("Honda", "C", 1999, 1) == True
    assert d.removeCar("Honda", "D", 1999, 1) == True
    assert e.removeCar("Honda", "E", 1999, 1) == True
    assert f.removeCar("Honda", "F", 1999, 1) == True
    assert g.removeCar("Honda", "F", 1999, 1) == True
    '''print(h.removeCar("Honda", "G", 1999, 1))'''
    assert i.removeCar("Honda", "H", 1999, 1) == True
    assert j.removeCar("Honda", "J", 1999, 1) == True
    assert k.removeCar("Honda", "L", 1999, 1) == True
    assert l.removeCar("Honda", "M", 1999, 1) == True
    assert m.removeCar("Honda", "O", 1999, 1) == True
    assert n.removeCar("Honda", "Q", 1999, 1) == True
    assert o.removeCar("Honda", "Z", 1999, 1) == True


def test_getSuccessor():
    a = CarInventory()
    car1 = Car("Honda", "J", 1999, 1)
    car2 = Car("Honda", "D", 1999, 1)
    car3 = Car("Honda", "C", 1999, 1)
    car4 = Car("Honda", "F", 1999, 1)
    car5 = Car("Honda", "E", 1999, 1)
    car6 = Car("Honda", "B", 1999, 1)
    car7 = Car("Honda", "A", 1999, 1)
    car8 = Car("Honda", "O", 1999, 1)
    car9 = Car("Honda", "L", 1999, 1)
    car10 = Car("Honda", "M", 1999, 1)
    car11 = Car("Honda", "Q", 1999, 1)
    car12 = Car("Honda", "Z", 1999, 1)
    car13 = Car("Honda", "G", 1000, 1)
    car14 = Car("Honda", "H", 1999, 1)
    a.addCar(car1)
    a.addCar(car2)
    a.addCar(car3)
    a.addCar(car4)
    a.addCar(car5)
    a.addCar(car6)
    a.addCar(car7)
    a.addCar(car8)
    a.addCar(car9)
    a.addCar(car10)
    a.addCar(car11)
    a.addCar(car12)
    a.addCar(car13)
    a.addCar(car14)
    assert a.getSuccessor("Honda", "A") == car6
    assert a.getSuccessor("Honda", "B") == car3
    assert a.getSuccessor("Honda", "C") == car2
    assert a.getSuccessor("Honda", "D") == car5
    assert a.getSuccessor("Honda", "E") == car4
    assert a.getSuccessor("Honda", "F") == car13
    assert a.getSuccessor("Honda", "J") == car9
    assert a.getSuccessor("Honda", "L") == car10
    assert a.getSuccessor("Honda", "M") == car8
    assert a.getSuccessor("Honda", "O") == car11
    assert a.getSuccessor("Honda", "Q") == car12
    assert a.getSuccessor("Honda", "Z") == None
    assert a.getSuccessor("Deda", "As") == None
    assert a.getSuccessor("Honda", "G") == car14
    assert a.getSuccessor("Honda", "H") == car1



test_car()
test_carinventorynode()
test_addToCarInventory()
test_removalFromCarInventory()
test_getSuccessor()
